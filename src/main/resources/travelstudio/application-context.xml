<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
      http://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/context
      http://www.springframework.org/schema/context/spring-context.xsd
      http://www.springframework.org/schema/aop
      http://www.springframework.org/schema/aop/spring-aop.xsd
      http://www.springframework.org/schema/tx
      http://www.springframework.org/schema/tx/spring-tx.xsd">

  <!-- 페이지 컨트롤러를 제외한 웹에서 사용할 공통 객체 준비-->
  <context:component-scan base-package="travelstudio">
    <context:exclude-filter type="aspectj" expression="travelstudio.control.*"/>
  </context:component-scan>
  
  <!-- 설정 파일에서 사용할 정보를 담은 .properties 파일 로딩하기 -->
  <context:property-placeholder location="classpath:travelstudio/jdbc.properties"/>

  <!-- DB의 커넥션 풀을 관리하는 객체이다.
       우리가 만든 DBConnectionPool의 기능을 갖고 있다.  -->
  <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="${jdbc.driverClassName}"/>
    <property name="url" value="${jdbc.url}"/>
    <property name="username" value="${jdbc.username}"/>
    <property name="password" value="${jdbc.password}"/>
  </bean>

  <!-- DB 트랜잭션을 관리하는 객체이다.
       Mybatis에서 관리하던 것을 스프링으로 옮겼다. -->
  <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="dataSource"/>
  </bean>
    
  <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    <property name="dataSource" ref="dataSource"/>
    <property name="typeAliasesPackage" value="travelstudio.domain"/>
    <property name="mapperLocations" value="classpath*:travelstudio/dao/*Dao.xml"/>
  </bean>
  
  <!-- DAO 인터페이스의 구현체를 자동으로 생성할 객체 준비 -->
  <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    <property name="basePackage" value="travelstudio.dao"/>
  </bean>
  
  <!-- 트랜잭션을 처리하는 방법1 -->
  <!-- point-cut과 advice 지정 -->
  <aop:config>
    <aop:pointcut id="defaultServiceOperation"
                expression="execution(* travelstudio.service.*Service.*(..))"/>
    <aop:advisor pointcut-ref="defaultServiceOperation" advice-ref="defaultTxAdvice"/>
  </aop:config>
  
  <!-- 트랜잭션 관리자를 사용하여 트랜잭션을 관리하는 필터 객체(트랜잭션 AOP 객체) -->
  <tx:advice id="defaultTxAdvice" transaction-manager="txManager">
    <tx:attributes>
      <tx:method name="get*" read-only="true"/> 
      <tx:method name="list*" read-only="true"/> 
      <tx:method name="*"/>
    </tx:attributes>
  </tx:advice>
  
  <!-- 트랜잭션을 처리하는 방법2 -->
  <!-- @Transactional 애노테이션을 처리할 객체 등록 -->
  <!-- <tx:annotation-driven transaction-manager="txManager"/> -->
</beans>






